Given an index k, return the kth row of the Pascal’s triangle.

Pascal’s triangle : To generate A[C] in row R, sum up A’[C] and A’[C-1] from previous row R - 1.

Example:

Input : k = 3

Return : [1,3,3,1]
NOTE : k is 0 based. k = 0, corresponds to the row [1].

Note:Could you optimize your algorithm to use only O(k) extra space?



Unlike the above approach, we will just generate only the numbers of the Nth row.
We can observe that the Nth row of the Pascals triangle consists of following sequence:
NC0, NC1, ......, NCN - 1, NCN
Since, NC0 = 1, the following values of the sequence can be generated by the following equation:
NCr = (NCr - 1 * (N - r + 1)) / r where 1 ≤ r ≤ N



public class Solution {
    public ArrayList<Integer> getRow(int N) {
    //     ArrayList<Integer> al=new ArrayList<Integer>(n);
    //     for(int i=0;i<=n;i++)
    //     {
    //         al.add((fact(n))/(fact(i)*fact(n-i)));
    //     }
    //     return al;
    // }
    // int fact(int n)
    // {
    //     int f=1;
    //     if(n==0 || n==1) return 1;
    //     for(int i=2;i<=n;i++)
    //     f=f*i;
    //     return f;
    // }
    ArrayList<Integer> al=new ArrayList<Integer>();
    int prev=1;
    al.add(prev);

    for(int i=1;i<=N;i++)
    {
        int curr=(prev*(N-i+1))/i;
        al.add(curr);
        prev=curr;
    }
    return al;
    }
}
